{"version":3,"file":"pending.min.js","sources":["../src/pending.js"],"sourcesContent":["\nimport ModalFactory from 'core/modal_factory';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * Inicializa los listeners para mostrar detalles de respuestas AI.\n */\nexport const init = () => {\n    // Botón de ver detalles (ya lo tenías)\n    document.querySelectorAll('.view-details').forEach(btn => {\n        btn.addEventListener('click', e => {\n            const token = e.currentTarget.dataset.token;\n\n            Ajax.call([{\n                methodname: 'local_forum_ai_get_details',\n                args: { token: token },\n            }])[0].done(data => {\n                ModalFactory.create({\n                    type: ModalFactory.types.DEFAULT,\n                    title: 'Detalles del debate',\n                    body: renderDiscussion(data),\n                    large: true,\n                }).done(modal => {\n                    modal.show();\n                });\n            }).fail(Notification.exception);\n        });\n    });\n\n    // Botones de aprobar/rechazar\n    document.querySelectorAll('.action-btn').forEach(btn => {\n        btn.addEventListener('click', e => {\n            e.preventDefault();\n            const token = btn.dataset.token;\n            const action = btn.dataset.action;\n\n            Ajax.call([{\n                methodname: 'local_forum_ai_approve_response',\n                args: { token: token, action: action },\n            }])[0].done(() => {\n                // Quitar la fila de la tabla\n                const row = btn.closest('tr');\n                if (row) {\n                    row.remove();\n                }\n            }).fail(Notification.exception);\n        });\n    });\n};\n/**\n * Construye el HTML para el modal de detalles.\n *\n * @param {Object} data Datos recibidos del servicio AJAX\n * @returns {string} HTML\n */\nfunction renderDiscussion(data) {\n    let html = `<h4>${data.course} / ${data.forum}</h4>\n                <h5>Debate: ${data.discussion}</h5>`;\n\n    if (data.posts.length === 0) {\n        html += '<p class=\"text-warning\">No se encontraron posts en este debate.</p>';\n    } else {\n        data.posts.forEach((post) => {\n            html += renderPost(post);\n        });\n    }\n\n    html += `<div class=\"alert alert-primary mt-4\">\n               <h5>Respuesta AI propuesta</h5>\n               ${data.airesponse}\n             </div>`;\n    return html;\n}\n\n/**\n * Renderiza un post individual con su nivel de indentación correspondiente\n *\n * @param {Object} post Datos del post\n * @returns {string} HTML del post\n */\nfunction renderPost(post) {\n    // Calcular la indentación basada en el nivel\n    const indentationLevel = post.level;\n    const marginLeft = indentationLevel * 30; // 30px por cada nivel\n\n    // Diferentes estilos de borde para diferentes niveles\n    let borderClass = 'border-left-primary';\n    if (indentationLevel === 1) {\n        borderClass = 'border-left-info';\n    } else if (indentationLevel === 2) {\n        borderClass = 'border-left-success';\n    } else if (indentationLevel >= 3) {\n        borderClass = 'border-left-warning';\n    }\n\n    // Indicador visual del nivel de respuesta\n    let levelIndicator = '';\n    if (indentationLevel > 0) {\n        levelIndicator = `<span class=\"badge badge-secondary mb-2\">\n            ${'↳ '.repeat(indentationLevel)}Respuesta nivel ${indentationLevel}\n        </span><br>`;\n    }\n\n    return `\n        <div class=\"mb-3 p-3 border ${borderClass}\" style=\"margin-left: ${marginLeft}px; border-left-width: 4px !important;\">\n            ${levelIndicator}\n            <div class=\"d-flex justify-content-between align-items-start mb-2\">\n                <strong class=\"text-primary\">${post.subject}</strong>\n                <small class=\"text-muted\">Nivel: ${indentationLevel}</small>\n            </div>\n            <div class=\"mb-2\">\n                <em class=\"text-info\">${post.author}</em>\n                <small class=\"text-muted ml-2\">(${post.created})</small>\n            </div>\n            <div class=\"post-content\">\n                ${post.message}\n            </div>\n        </div>`;\n}\n"],"names":["renderDiscussion","data","html","course","forum","discussion","posts","length","forEach","post","indentationLevel","level","marginLeft","borderClass","levelIndicator","repeat","subject","author","created","message","renderPost","airesponse","document","querySelectorAll","btn","addEventListener","e","token","currentTarget","dataset","call","methodname","args","done","create","type","ModalFactory","types","DEFAULT","title","body","large","modal","show","fail","Notification","exception","preventDefault","action","row","closest","remove"],"mappings":"8cAwDSA,iBAAiBC,UAClBC,mBAAcD,KAAKE,qBAAYF,KAAKG,oDACdH,KAAKI,2BAEL,IAAtBJ,KAAKK,MAAMC,OACXL,MAAQ,sEAERD,KAAKK,MAAME,SAASC,OAChBP,eAiBQO,YAEVC,iBAAmBD,KAAKE,MACxBC,WAAgC,GAAnBF,qBAGfG,YAAc,sBACO,IAArBH,iBACAG,YAAc,mBACc,IAArBH,iBACPG,YAAc,sBACPH,kBAAoB,IAC3BG,YAAc,2BAIdC,eAAiB,GACjBJ,iBAAmB,IACnBI,gFACM,KAAKC,OAAOL,6CAAoCA,iGAKxBG,6CAAoCD,4EAC5DE,0JAEiCL,KAAKO,+EACDN,gIAGXD,KAAKQ,yEACKR,KAAKS,0GAGrCT,KAAKU,gDApDHC,CAAWX,SAI3BP,uHAEaD,KAAKoB,oCAEXnB,mBAhES,KAEhBoB,SAASC,iBAAiB,iBAAiBf,SAAQgB,MAC/CA,IAAIC,iBAAiB,SAASC,UACpBC,MAAQD,EAAEE,cAAcC,QAAQF,oBAEjCG,KAAK,CAAC,CACPC,WAAY,6BACZC,KAAM,CAAEL,MAAOA,UACf,GAAGM,MAAKhC,8BACKiC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,QACzBC,MAAO,sBACPC,KAAMxC,iBAAiBC,MACvBwC,OAAO,IACRR,MAAKS,QACJA,MAAMC,aAEXC,KAAKC,sBAAaC,iBAK7BxB,SAASC,iBAAiB,eAAef,SAAQgB,MAC7CA,IAAIC,iBAAiB,SAASC,IAC1BA,EAAEqB,uBACIpB,MAAQH,IAAIK,QAAQF,MACpBqB,OAASxB,IAAIK,QAAQmB,qBAEtBlB,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CAAEL,MAAOA,MAAOqB,OAAQA,WAC9B,GAAGf,MAAK,WAEFgB,IAAMzB,IAAI0B,QAAQ,MACpBD,KACAA,IAAIE,YAETP,KAAKC,sBAAaC"}