{"version":3,"file":"review.min.js","sources":["../src/review.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport { get_string as getString } from 'core/str';\n\n/**\n * JS controller for the AI response review page.\n */\nexport const init = async () => {\n    const editBtn = document.getElementById(\"edit-btn\");\n    const viewDiv = document.getElementById(\"airesponse-view\");\n    const editForm = document.getElementById(\"airesponse-edit\");\n    const cancelBtn = document.getElementById(\"cancel-edit\");\n    const textarea = editForm ? editForm.querySelector(\"textarea[name='message']\") : null;\n    const saveBtn = editForm ? editForm.querySelector(\"button[type='submit']\") : null;\n    const token = editForm ? editForm.dataset.token : null;\n\n    // Preload strings used throughout the UI\n    const [\n        strUpdatedSuccess,\n        strUpdatedError,\n        strApproved,\n        strRejected,\n        strActionFailed\n    ] = await Promise.all([\n        getString('response_updated', 'local_forum_ai'),\n        getString('response_update_failed', 'local_forum_ai'),\n        getString('response_approved', 'local_forum_ai'),\n        getString('response_rejected', 'local_forum_ai'),\n        getString('action_failed', 'local_forum_ai'),\n    ]);\n\n    // --- Toggle editing ---\n    if (editBtn) {\n        editBtn.addEventListener(\"click\", () => {\n            viewDiv.style.display = \"none\";\n            editForm.style.display = \"block\";\n        });\n    }\n\n    if (cancelBtn) {\n        cancelBtn.addEventListener(\"click\", () => {\n            editForm.style.display = \"none\";\n            viewDiv.style.display = \"block\";\n        });\n    }\n\n    // --- Save changes via AJAX ---\n    if (saveBtn) {\n        saveBtn.addEventListener(\"click\", e => {\n            e.preventDefault();\n            const newMessage = textarea.value;\n\n            Ajax.call([{\n                methodname: \"local_forum_ai_update_response\",\n                args: { token: token, message: newMessage },\n            }])[0].done(response => {\n                if (response.status === \"ok\") {\n                    // Replace content in normal view\n                    viewDiv.querySelector(\".card-text\").innerHTML = response.message;\n\n                    Notification.addNotification({\n                        message: strUpdatedSuccess,\n                        type: \"success\"\n                    });\n\n                    // Return to normal view\n                    editForm.style.display = \"none\";\n                    viewDiv.style.display = \"block\";\n                } else {\n                    Notification.addNotification({\n                        message: strUpdatedError,\n                        type: \"error\"\n                    });\n                }\n            }).fail(Notification.exception);\n        });\n    }\n\n    // --- Approve / Reject ---\n    document.querySelectorAll(\".action-btn\").forEach(btn => {\n        btn.addEventListener(\"click\", e => {\n            e.preventDefault();\n\n            const action = btn.dataset.action;\n            const token = btn.dataset.token;\n\n            Ajax.call([{\n                methodname: \"local_forum_ai_approve_response\",\n                args: { token: token, action: action },\n            }])[0].done(response => {\n                if (response.success) {\n                    Notification.addNotification({\n                        message: action === \"approve\" ? strApproved : strRejected,\n                        type: \"success\"\n                    });\n\n                    setTimeout(() => {\n                        window.location.href =\n                            `${M.cfg.wwwroot}/mod/forum/discuss.php?d=${btn.dataset.discussionid}`;\n                    }, 1500);\n                } else {\n                    Notification.addNotification({\n                        message: strActionFailed,\n                        type: \"error\"\n                    });\n                }\n            }).fail(Notification.exception);\n        });\n    });\n};\n"],"names":["async","editBtn","document","getElementById","viewDiv","editForm","cancelBtn","textarea","querySelector","saveBtn","token","dataset","strUpdatedSuccess","strUpdatedError","strApproved","strRejected","strActionFailed","Promise","all","addEventListener","style","display","e","preventDefault","newMessage","value","call","methodname","args","message","done","response","status","innerHTML","addNotification","type","fail","Notification","exception","querySelectorAll","forEach","btn","action","success","setTimeout","window","location","href","M","cfg","wwwroot","discussionid"],"mappings":"wYAOoBA,gBACVC,QAAUC,SAASC,eAAe,YAClCC,QAAUF,SAASC,eAAe,mBAClCE,SAAWH,SAASC,eAAe,mBACnCG,UAAYJ,SAASC,eAAe,eACpCI,SAAWF,SAAWA,SAASG,cAAc,4BAA8B,KAC3EC,QAAUJ,SAAWA,SAASG,cAAc,yBAA2B,KACvEE,MAAQL,SAAWA,SAASM,QAAQD,MAAQ,MAI9CE,kBACAC,gBACAC,YACAC,YACAC,uBACMC,QAAQC,IAAI,EAClB,mBAAU,mBAAoB,mBAC9B,mBAAU,yBAA0B,mBACpC,mBAAU,oBAAqB,mBAC/B,mBAAU,oBAAqB,mBAC/B,mBAAU,gBAAiB,oBAI3BjB,SACAA,QAAQkB,iBAAiB,SAAS,KAC9Bf,QAAQgB,MAAMC,QAAU,OACxBhB,SAASe,MAAMC,QAAU,WAI7Bf,WACAA,UAAUa,iBAAiB,SAAS,KAChCd,SAASe,MAAMC,QAAU,OACzBjB,QAAQgB,MAAMC,QAAU,WAK5BZ,SACAA,QAAQU,iBAAiB,SAASG,IAC9BA,EAAEC,uBACIC,WAAajB,SAASkB,oBAEvBC,KAAK,CAAC,CACPC,WAAY,iCACZC,KAAM,CAAElB,MAAOA,MAAOmB,QAASL,eAC/B,GAAGM,MAAKC,WACgB,OAApBA,SAASC,QAET5B,QAAQI,cAAc,cAAcyB,UAAYF,SAASF,8BAE5CK,gBAAgB,CACzBL,QAASjB,kBACTuB,KAAM,YAIV9B,SAASe,MAAMC,QAAU,OACzBjB,QAAQgB,MAAMC,QAAU,+BAEXa,gBAAgB,CACzBL,QAAShB,gBACTsB,KAAM,aAGfC,KAAKC,sBAAaC,cAK7BpC,SAASqC,iBAAiB,eAAeC,SAAQC,MAC7CA,IAAItB,iBAAiB,SAASG,IAC1BA,EAAEC,uBAEImB,OAASD,IAAI9B,QAAQ+B,OACrBhC,MAAQ+B,IAAI9B,QAAQD,oBAErBgB,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CAAElB,MAAOA,MAAOgC,OAAQA,WAC9B,GAAGZ,MAAKC,WACJA,SAASY,+BACIT,gBAAgB,CACzBL,QAAoB,YAAXa,OAAuB5B,YAAcC,YAC9CoB,KAAM,YAGVS,YAAW,KACPC,OAAOC,SAASC,eACTC,EAAEC,IAAIC,4CAAmCT,IAAI9B,QAAQwC,gBAC7D,6BAEUjB,gBAAgB,CACzBL,QAASb,gBACTmB,KAAM,aAGfC,KAAKC,sBAAaC"}